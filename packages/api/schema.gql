# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Badge {
  createdAt: String!
  description: String!
  id: ID!
  imagePath: String!
  level: Float!
  name: String!
}

type Comment {
  author: User!
  content: String!
  createdAt: String!
  dislikes: Int!
  id: ID!
  lastEdited: String
  likes: Int!
  post: Post!
}

input CreateBotInput {
  name: String!
  username: String!
}

input CreateResortInput {
  banner: String!
  category: String!
  description: String!
  logo: String!
  name: String!
}

input EditCommentInput {
  content: String!
}

input EditPostInput {
  message: String
  title: String
  topics: [String!]
}

input MakeBadgeInput {
  description: String!
  imagePath: String!
  level: Float!
  name: String!
}

type Mutation {
  createBot(data: CreateBotInput!): String!
  createComment(data: NewCommentInput!, postId: String!): Boolean!
  createPost(data: NewPostInput!): Boolean!
  createResort(data: CreateResortInput!): Boolean!
  deleteAccount: Boolean!
  deletePost(postId: String!): Boolean!
  editComment(commentId: String!, data: EditCommentInput!): Boolean!
  editPost(data: EditPostInput!, postId: String!): Boolean!
  followUser(userId: String!): Boolean!
  giveBadge(badgeName: String!, username: String!): Boolean!
  joinResort(resortId: String!): Boolean
  likeDislike(dislike: Boolean!, like: Boolean!, postId: String!): Boolean!
  makeAdmin(roles: [Role!]!, user: String!): Boolean!
  makeBadge(data: MakeBadgeInput!): Boolean!
  markNotificationAsRead(notificationId: String!): Boolean!
  refreshBotToken(botId: String!): String!
  updateProfile(data: UpdateProfileInput!): Boolean!
}

input NewCommentInput {
  content: String!
}

input NewPostInput {
  message: String!
  topics: [String!]!
}

type Notification {
  createdAt: String!
  id: ID!
  performer: User
  read: Boolean!
  type: NotificationType!
  user: User!
}

enum NotificationType {
  Follow
  Like
  Reply
}

type PaginatedCommentFromPost_postResponse {
  hasMore: Boolean!
  items: [Comment!]!
  total: Float!
}

type PaginatedCommentFromUser_authorResponse {
  hasMore: Boolean!
  items: [Comment!]!
  total: Float!
}

type PaginatedPostFromResort_resortResponse {
  hasMore: Boolean!
  items: [Post!]!
  total: Float!
}

type PaginatedPostFromUser_authorResponse {
  hasMore: Boolean!
  items: [Post!]!
  total: Float!
}

type PaginatedPostFromUser_dislikersResponse {
  hasMore: Boolean!
  items: [Post!]!
  total: Float!
}

type PaginatedPostFromUser_likersResponse {
  hasMore: Boolean!
  items: [Post!]!
  total: Float!
}

type PaginatedUserFromPost_dislikedPostsResponse {
  hasMore: Boolean!
  items: [User!]!
  total: Float!
}

type PaginatedUserFromPost_likedPostsResponse {
  hasMore: Boolean!
  items: [User!]!
  total: Float!
}

type PaginatedUserFromResort_joinedResortsResponse {
  hasMore: Boolean!
  items: [User!]!
  total: Float!
}

type PaginatedUserFromUser_botOwnerResponse {
  hasMore: Boolean!
  items: [User!]!
  total: Float!
}

type PaginatedUserFromUser_followersResponse {
  hasMore: Boolean!
  items: [User!]!
  total: Float!
}

type PaginatedUserFromUser_followingResponse {
  hasMore: Boolean!
  items: [User!]!
  total: Float!
}

type Post {
  author: User!
  comments(limit: Float!, offset: Float!): PaginatedCommentFromPost_postResponse!
  createdAt: String!
  dislikers(limit: Float!, offset: Float!): PaginatedUserFromPost_dislikedPostsResponse!
  dislikes: Float!
  id: ID!
  isDisliked: Boolean!
  isLiked: Boolean!
  lastEdited: String
  likers(limit: Float!, offset: Float!): PaginatedUserFromPost_likedPostsResponse!
  likes: Float!
  message: String!
  resort: Resort
  title: String
  topics: [String!]!
}

type Query {
  currentUser: User
  getAvailableUsername(username: String!): String!
  getBadge(id: String!): Badge!
  getComment(id: String!): Comment!
  getNotifications: [Notification!]
  getPost(id: String!): Post!
  getRepo(id: String!): Repo!
  getResort(id: String!): Resort!
  getResortByName(name: String!): Resort
  getUser(id: String!): User!
  getUserByName(username: String!): User
  paginateBadges(limit: Float!, offset: Float!): [Badge!]!
  paginateComments(limit: Float!, offset: Float!): [Comment!]!
  paginatePosts(limit: Float!, offset: Float!): [Post!]!
  paginateRepos(limit: Float!, offset: Float!): [Repo!]!
  paginateResorts(limit: Float!, offset: Float!): [Resort!]!
  paginateUsers(limit: Float!, offset: Float!): [User!]!
}

type Repo {
  active: Boolean!

  """
  Time when the repo was added (the number of milliseconds passed since Unix epoch 1970-01-01T00:00:00Z)
  """
  date_added: String!
  desc: String!
  full_name: String!
  github_owner: String!
  id: ID!
  issues: Float!
  language: String!
  name: String!
  owner: User!
  stars: Float!
  url: String!
}

type Resort {
  banner: String!
  category: String!
  createdAt: String!
  description: String!
  id: String!
  isJoined: Boolean!
  logo: String!
  members(limit: Float!, offset: Float!): PaginatedUserFromResort_joinedResortsResponse!
  name: String!
  owner: User!
  posts(limit: Float!, offset: Float!): PaginatedPostFromResort_resortResponse!
}

enum Role {
  Admin
  Moderator
  SuperAdmin
}

input UpdateProfileInput {
  avatar: String
  banner: String
  bio: String
  name: String
  username: String
}

type User {
  avatar: String!
  badges: [Badge!]
  banner: String
  bio: String
  botOwner: User
  bots(limit: Float!, offset: Float!): PaginatedUserFromUser_botOwnerResponse!
  comments(limit: Float!, offset: Float!): PaginatedCommentFromUser_authorResponse!
  createdAt: String!
  discord: String
  dislikedPosts(limit: Float!, offset: Float!): PaginatedPostFromUser_dislikersResponse!
  followers(limit: Float!, offset: Float!): PaginatedUserFromUser_followingResponse!
  following(limit: Float!, offset: Float!): PaginatedUserFromUser_followersResponse!
  github: String
  google: String
  id: ID!
  isBot: Boolean
  likedPosts(limit: Float!, offset: Float!): PaginatedPostFromUser_likersResponse!
  name: String
  ownedResorts: [Resort!]
  posts(limit: Float!, offset: Float!): PaginatedPostFromUser_authorResponse!
  repos: [Repo!]
  roles: [Role!]!
  twitter: String
  url: String
  username: String
  verified: Boolean!
}
